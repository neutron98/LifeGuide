Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>HELP.md\ntarget/\n!.mvn/wrapper/maven-wrapper.jar\n!**/src/main/**\n!**/src/test/**\n\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n\n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\n\n### NetBeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/\nbuild/\n\n### VS Code ###\n.vscode/\n/.mvn/\n/src/test/\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ .gitignore	(date 1578340720139)
@@ -31,3 +31,6 @@
 .vscode/
 /.mvn/
 /src/test/
+/mvnw
+/mvnw.cmd
+/src/test/
Index: ../mart/src/main/resources/application-dev.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    username: root\n    password: 123456\n    url: jdbc:mysql://192.168.0.13/mart?characterEncoding=utf-8&useSSL=false\n  jpa:\n    show-sql: true\n  jackson:\n    default-property-inclusion: non_null\n  redis:\n    host: 192.168.0.13\n    port: 6379\nserver:\n  context-path: /sell\n\nwechat:\n  mpAppId: wx710aa2f8ef22a0ae\n  mpAppSecret: 528a358eb43e0fe5f2c4296f0338fa3d\n  openAppId: wx6ad144e54af67d87\n  openAppSecret: 91a2ff6d38a2bbccfb7e9f9079108e2e\n  mchId: 1483469312\n  mchKey: 06C56A89949D617xxxxxxxxxxx\n  keyPath: /var/weixin_cert/h5.p12\n  notifyUrl: http://mart.natapp1.cc/sell/pay/notify\n  templateId:\n    orderStatus: 32J2K4BtG6cX3a_PYGQS68e8LwIPAGlFnGRX5ObwrQk  #Id for order status change\n\nprojectUrl:\n  wechatMpAuthorize: http://mart.natapp1.cc\n  wechatOpenAuthorize: http://mart.natapp1.cc\n  sell: http://mart.natapp1.cc\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/resources/application-dev.yml	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/resources/application-dev.yml	(date 1577828125706)
@@ -12,15 +12,22 @@
     host: 192.168.0.13
     port: 6379
 server:
-  context-path: /sell
+  servlet:
+    context-path: /sell
 
 wechat:
+  # Media platform, authorization
   mpAppId: wx710aa2f8ef22a0ae
   mpAppSecret: 528a358eb43e0fe5f2c4296f0338fa3d
+
+  # Open platform, for seller login
   openAppId: wx6ad144e54af67d87
   openAppSecret: 91a2ff6d38a2bbccfb7e9f9079108e2e
+
+  # merchant id
   mchId: 1483469312
   mchKey: 06C56A89949D617xxxxxxxxxxx
+  # key. not for request an order, but for refund.
   keyPath: /var/weixin_cert/h5.p12
   notifyUrl: http://mart.natapp1.cc/sell/pay/notify
   templateId:
Index: ../mart/src/main/java/com/service/mart/util/ResultVOUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.util;\n\nimport com.service.mart.viewobject.ResultVO;\n\npublic class ResultVOUtil {\n\n    public static ResultVO success(){\n        return success(null);\n    }\n\n    public static ResultVO success(Object obj){\n        ResultVO resultVO = new ResultVO();\n        resultVO.setData(obj);\n        resultVO.setCode(0);\n        resultVO.setMsg(\"success\");\n        return resultVO;\n    }\n\n    public  static  ResultVO error(Integer code, String msg){\n        ResultVO resultVO = new ResultVO();\n        resultVO.setCode(code);\n        resultVO.setMsg(msg);\n        return resultVO;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/util/ResultVOUtil.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/util/ResultVOUtil.java	(date 1577825319259)
@@ -7,7 +7,7 @@
     public static ResultVO success(){
         return success(null);
     }
-
+    @SuppressWarnings("unchecked")
     public static ResultVO success(Object obj){
         ResultVO resultVO = new ResultVO();
         resultVO.setData(obj);
Index: ../mart/src/test/java/com/service/mart/repository/OrderMasterRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.repository;\n\nimport com.service.mart.entity.OrderMaster;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.math.BigDecimal;\n\nimport static org.junit.Assert.*;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class OrderMasterRepositoryTest {\n    @Autowired\n    private OrderMasterRepository repository;\n\n    private final String OPENID = \"110\";\n\n    @Test\n    public void saveTest(){\n        OrderMaster orderMaster = new OrderMaster();\n        orderMaster.setOrderId(\"123457\");\n        orderMaster.setFirstName(\"John\");\n        orderMaster.setLastName(\"Smith\");\n        orderMaster.setConsumerPhone(\"123-456-7890\");\n        orderMaster.setConsumerAddress(\"CMU\");\n        orderMaster.setConsumerOpenid(OPENID);\n        orderMaster.setOrderAmount(new BigDecimal(2.5));\n\n        OrderMaster result = repository.save(orderMaster);\n        Assert.assertNotNull(result);\n\n    }\n    @Test\n    public void findByConsumerOpenid() {\n        PageRequest request = new PageRequest(1, 3);\n        Page<OrderMaster> result = repository.findByConsumerOpenid(OPENID, request);\n        Assert.assertNotEquals(0, result.getTotalElements());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/test/java/com/service/mart/repository/OrderMasterRepositoryTest.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/test/java/com/service/mart/repository/OrderMasterRepositoryTest.java	(date 1577824765158)
@@ -12,8 +12,6 @@
 
 import java.math.BigDecimal;
 
-import static org.junit.Assert.*;
-
 @RunWith(SpringRunner.class)
 @SpringBootTest
 public class OrderMasterRepositoryTest {
@@ -39,7 +37,7 @@
     }
     @Test
     public void findByConsumerOpenid() {
-        PageRequest request = new PageRequest(1, 3);
+        PageRequest request = PageRequest.of(1, 3);
         Page<OrderMaster> result = repository.findByConsumerOpenid(OPENID, request);
         Assert.assertNotEquals(0, result.getTotalElements());
     }
Index: ../mart/src/main/java/com/service/mart/config/ProjectUrlConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.config;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Data\n@ConfigurationProperties(prefix = \"projectUrl\")\n@Component\npublic class ProjectUrlConfig {\n    /**\n     * Wechat public platform authorize url.\n     */\n    public String wechatMpAuthorize;\n    /**\n     * Wechat open platform authorize url.\n     */\n    public String wechatOpenAuthorize;\n\n    /**\n     * Selling system url.\n     */\n    public String sell;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/config/ProjectUrlConfig.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/config/ProjectUrlConfig.java	(date 1577823983160)
@@ -5,7 +5,7 @@
 import org.springframework.stereotype.Component;
 
 @Data
-@ConfigurationProperties(prefix = "projectUrl")
+@ConfigurationProperties(prefix = "project-url")
 @Component
 public class ProjectUrlConfig {
     /**
Index: ../mart/src/main/java/com/service/mart/service/impl/OrderServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.service.impl;\n\nimport com.service.mart.converter.OrderMaster2OrderDTOConverter;\nimport com.service.mart.dto.CartDTO;\nimport com.service.mart.dto.OrderDTO;\nimport com.service.mart.entity.OrderDetail;\nimport com.service.mart.entity.OrderMaster;\nimport com.service.mart.entity.ProductInfo;\nimport com.service.mart.enums.OrderStatusEnum;\nimport com.service.mart.enums.PayStatusEnum;\nimport com.service.mart.enums.ResultEnum;\nimport com.service.mart.exception.SellException;\nimport com.service.mart.repository.OrderDetailRepository;\nimport com.service.mart.repository.OrderMasterRepository;\nimport com.service.mart.service.OrderService;\nimport com.service.mart.service.PayService;\nimport com.service.mart.service.PushMessageService;\nimport com.service.mart.service.WebSocket;\nimport com.service.mart.util.KeyUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.CollectionUtils;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\n@Slf4j\npublic class OrderServiceImpl implements OrderService {\n\n    @Autowired\n    private ProductServiceImpl productService;\n\n    @Autowired\n    private OrderDetailRepository orderDetailRepository;\n\n    @Autowired\n    private OrderMasterRepository orderMasterRepository;\n\n    @Autowired\n    private PayService payService;\n\n    @Autowired\n    private PushMessageService pushMessageService;\n\n    @Autowired\n    private WebSocket webSocket;\n\n    @Override\n    @Transactional\n    public OrderDTO create(OrderDTO orderDTO) {\n        BigDecimal orderAmount = BigDecimal.ZERO;\n        // order Id is generated out of the loop\n        String orderId = KeyUtil.genUniqueKey();\n\n        // product price\n        // 1. search the product (quantity price; ensure the stock)\n        for (OrderDetail orderDetail: orderDTO.getOrderDetailList()){\n            ProductInfo productInfo = productService.findOne(orderDetail.getProductId());\n            if (productInfo == null){\n                throw new SellException(ResultEnum.PRODUCT_NOT_EXIST);\n            }\n            // 2. calculate the total amount\n            orderAmount = productInfo.getProductPrice()\n                    .multiply(new BigDecimal(orderDetail.getProductQuantity())) // amount for one product\n                    .add(orderAmount);\n\n            // 3.1 modify records in database(OrderDetail)\n            orderDetail.setDetailId(KeyUtil.genUniqueKey());\n            orderDetail.setOrderId(orderId);\n            BeanUtils.copyProperties(productInfo, orderDetail);  // copy remaining properties from productInfo\n            orderDetailRepository.save(orderDetail);\n        }\n        // 3.2 modify records in database(OrderMaster)\n        OrderMaster orderMaster = new OrderMaster();\n        orderDTO.setOrderId(orderId);\n        BeanUtils.copyProperties(orderDTO, orderMaster);\n        orderMaster.setOrderAmount(orderAmount);\n        orderMaster.setOrderStatus(OrderStatusEnum.NEW.getCode());\n        orderMaster.setPayStatus(PayStatusEnum.WAIT.getCode());\n        orderMasterRepository.save(orderMaster);\n\n        // 4. decrease the stock\n        // collect the items into list\n        List<CartDTO> cartDTOList = // use lambda to make the for-loop clean\n                orderDTO.getOrderDetailList().stream()\n                        .map(e -> new CartDTO(e.getProductId(), e.getProductQuantity()))\n                        .collect(Collectors.toList());\n        productService.decreaseStock(cartDTOList);\n\n        //5. Send WebSocket Message\n        webSocket.sendMessage(orderDTO.getOrderId());\n\n        return orderDTO;\n    }\n\n    @Override\n    public OrderDTO findOne(String orderId) {\n        OrderMaster orderMaster = orderMasterRepository.findOne(orderId);\n        if (orderMaster == null){\n            throw new SellException(ResultEnum.ORDER_NOT_EXIST);\n        }\n\n        List<OrderDetail> orderDetailList = orderDetailRepository.findByOrderId(orderId);\n        if (orderDetailList.size() == 0){\n            throw new SellException(ResultEnum.ORDER_DETAIL_NOT_EXIST);\n        }\n\n        OrderDTO orderDTO = new OrderDTO();\n        BeanUtils.copyProperties(orderMaster, orderDTO);\n        orderDTO.setOrderDetailList(orderDetailList);\n        return orderDTO;\n    }\n\n    @Override\n    public Page<OrderDTO> findList(Pageable pageable) {\n        Page<OrderMaster> orderMasterPage = orderMasterRepository.findAll(pageable);\n        List<OrderDTO> orderDTOList = OrderMaster2OrderDTOConverter.convert(orderMasterPage.getContent());\n        Page<OrderDTO> orderDTOPage = new PageImpl<>(orderDTOList, pageable, orderMasterPage.getTotalElements());\n        return orderDTOPage;\n    }\n\n    @Override\n    public Page<OrderDTO> findList(String consumerOpenid, Pageable pageable) {\n        Page<OrderMaster> orderMasterPage = orderMasterRepository.findByConsumerOpenid(consumerOpenid, pageable);\n        List<OrderDTO> orderDTOList = OrderMaster2OrderDTOConverter.convert(orderMasterPage.getContent());\n        Page<OrderDTO> orderDTOPage = new PageImpl<>(orderDTOList, pageable, orderMasterPage.getTotalElements());\n        return orderDTOPage;\n    }\n\n    @Override\n    @Transactional\n    public OrderDTO cancel(OrderDTO orderDTO) {\n\n        // 1. check the order status (can not cancel it if the seller has already confirmed it)\n        if (!orderDTO.getOrderStatus().equals(OrderStatusEnum.NEW.getCode())){\n            log.error(\"[Cancel order]Wrong order status, orderId={}, orderStatus={}\",\n                    orderDTO.getOrderId(), orderDTO.getOrderStatus());\n            throw new SellException(ResultEnum.ORDER_STATUS_ERROR);\n        }\n        // 2. modify the order status\n        OrderMaster orderMaster = new OrderMaster();\n        orderDTO.setOrderStatus(OrderStatusEnum.CANCELLED.getCode());\n        BeanUtils.copyProperties(orderDTO, orderMaster);\n        if (orderMasterRepository.save(orderMaster)==null){ // save and check if successfully update\n            log.error(\"[Cancel order]Update failed, orderMaster={}\", orderMaster);\n            throw new SellException(ResultEnum.ORDER_UPDATE_FAIL);\n        }\n        // 3. add back to stock\n        if (CollectionUtils.isEmpty(orderDTO.getOrderDetailList())){\n            log.error(\"[Cancel order]No order details in the order, orderDTO={}\", orderDTO);\n            throw new SellException(ResultEnum.ORDER_DETAIL_EMPTY);\n        }\n        // collect the items into list\n        List<CartDTO> cartDTOList = orderDTO.getOrderDetailList().stream()\n                .map(e -> new CartDTO(e.getProductId(), e.getProductQuantity()))\n                .collect(Collectors.toList());\n        productService.increaseStock(cartDTOList);\n        // 4. if the consumer has already paid, refund\n        if (orderDTO.getPayStatus().equals(PayStatusEnum.SUCCESS.getCode())){\n            payService.refund(orderDTO);\n        }\n\n        return orderDTO;\n    }\n\n    @Override\n    @Transactional\n    public OrderDTO pay(OrderDTO orderDTO) {\n        // 1. check order status\n        if (!orderDTO.getOrderStatus().equals(OrderStatusEnum.NEW.getCode())){\n            log.error(\"[Finish order] Invalid order status, orderId={}\", orderDTO.getOrderId());\n            throw new SellException(ResultEnum.ORDER_STATUS_ERROR);\n        }\n        // 2. check payment status\n        if (!orderDTO.getPayStatus().equals(PayStatusEnum.WAIT.getCode())){\n            log.error(\"[Payment] Invalid payment status, orderDTO={}\", orderDTO);\n            throw new SellException((ResultEnum.PAY_STATUS_ERROR));\n        }\n        // 3. modify payment status\n        orderDTO.setPayStatus(PayStatusEnum.SUCCESS.getCode());\n        OrderMaster orderMaster = new OrderMaster();\n        BeanUtils.copyProperties(orderDTO, orderMaster);\n        if (orderMasterRepository.save(orderMaster) == null){\n            log.error(\"[Payment]Update failed, orderMaster={}\", orderMaster);\n            throw new SellException(ResultEnum.ORDER_UPDATE_FAIL);\n        }\n\n        return orderDTO;\n    }\n\n    @Override\n    @Transactional\n    public OrderDTO finish(OrderDTO orderDTO) {\n        // 1. check order status\n        if (!orderDTO.getOrderStatus().equals(OrderStatusEnum.NEW.getCode())){\n            log.error(\"[Finish order] Invalid order status, orderId={}\", orderDTO.getOrderId());\n            throw new SellException(ResultEnum.ORDER_STATUS_ERROR);\n        }\n        // 2. modify order status\n        orderDTO.setOrderStatus(OrderStatusEnum.FINISHED.getCode());\n        OrderMaster orderMaster = new OrderMaster();\n        BeanUtils.copyProperties(orderDTO, orderMaster);\n        if (orderMasterRepository.save(orderMaster) == null){\n            log.error(\"[Finish order]Update failed, orderMaster={}\", orderMaster);\n            throw new SellException(ResultEnum.ORDER_UPDATE_FAIL);\n        }\n\n        // 3. Push Template Message\n        pushMessageService.orderStatus(orderDTO);\n\n        return orderDTO;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/service/impl/OrderServiceImpl.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/service/impl/OrderServiceImpl.java	(date 1577823873976)
@@ -103,7 +103,7 @@
 
     @Override
     public OrderDTO findOne(String orderId) {
-        OrderMaster orderMaster = orderMasterRepository.findOne(orderId);
+        OrderMaster orderMaster = orderMasterRepository.findById(orderId).orElse(null);
         if (orderMaster == null){
             throw new SellException(ResultEnum.ORDER_NOT_EXIST);
         }
Index: src/test/java/cmu/youchun/recommender/service/impl/SellerServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/cmu/youchun/recommender/service/impl/SellerServiceImplTest.java	(date 1578248540123)
+++ src/test/java/cmu/youchun/recommender/service/impl/SellerServiceImplTest.java	(date 1578248540123)
@@ -0,0 +1,37 @@
+package cmu.youchun.recommender.service.impl;
+
+import cmu.youchun.recommender.model.SellerModel;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+
+import java.util.List;
+
+import static org.junit.Assert.*;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+public class SellerServiceImplTest {
+    @Autowired
+    SellerServiceImpl sellerService;
+    @Test
+    public void create() {
+    }
+
+    @Test
+    public void get() {
+    }
+
+    @Test
+    public void selectAll() {
+        List<SellerModel> sellerModelList = sellerService.selectAll();
+        Assert.assertNotEquals(0, sellerModelList.size());
+    }
+
+    @Test
+    public void changeStatus() {
+    }
+}
Index: src/test/java/cmu/youchun/recommender/dao/SellerModelMapperTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/cmu/youchun/recommender/dao/SellerModelMapperTest.java	(date 1578338470860)
+++ src/test/java/cmu/youchun/recommender/dao/SellerModelMapperTest.java	(date 1578338470860)
@@ -0,0 +1,54 @@
+package cmu.youchun.recommender.dao;
+
+
+import cmu.youchun.recommender.model.SellerModel;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+
+import java.util.List;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+public class SellerModelMapperTest {
+
+    @Autowired
+    private SellerModelMapper mapper;
+
+    @Test
+    public void deleteByPrimaryKey() {
+    }
+
+    @Test
+    public void insert() {
+    }
+
+    @Test
+    public void insertSelective() {
+    }
+
+    @Test
+    public void selectByPrimaryKey() {
+        SellerModel sellerModel = mapper.selectByPrimaryKey(1);
+        Assert.assertNotNull(sellerModel);
+
+    }
+
+    @Test
+    public void updateByPrimaryKeySelective() {
+    }
+
+    @Test
+    public void updateByPrimaryKey() {
+    }
+
+    @Test
+    public void selectAll() {
+        List<SellerModel> sellerModelList = mapper.selectAll();
+        Assert.assertNotEquals(0, sellerModelList.size());
+
+    }
+}
Index: ../mart/src/main/java/com/service/mart/controller/SellerProductController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.controller;\n\nimport com.service.mart.entity.CategoryInfo;\nimport com.service.mart.entity.ProductInfo;\nimport com.service.mart.exception.SellException;\nimport com.service.mart.form.ProductForm;\nimport com.service.mart.service.CategoryService;\nimport com.service.mart.service.ProductService;\nimport com.service.mart.util.KeyUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport javax.validation.Valid;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n *\n */\n@Controller\n@RequestMapping(\"/seller/product\")\n@Slf4j\npublic class SellerProductController {\n    @Autowired\n    private ProductService productService;\n\n    @Autowired\n    private CategoryService categoryService;\n\n    @GetMapping(\"/list\")\n    public ModelAndView list(@RequestParam(value = \"page\", defaultValue = \"1\") int page,\n                             @RequestParam(value = \"size\", defaultValue = \"10\") int size,\n                             Map<String, Object> map){\n        PageRequest request = new PageRequest(page - 1, size);  // start from 1\n        Page<ProductInfo> productInfoPage = productService.findAll(request);\n        map.put(\"productInfoPage\", productInfoPage);\n        map.put(\"currentPage\", page);\n        map.put(\"size\", size);\n        return new ModelAndView(\"product/list\", map);\n    }\n\n    @GetMapping(\"/on_market\")\n    public ModelAndView onMarket(@RequestParam(\"productId\") String productId,\n                               Map<String, Object> map){\n        try{\n            productService.onMarket(productId);\n        } catch(SellException e){\n            map.put(\"msg\", e.getMessage());\n            map.put(\"url\", \"/sell/seller/product/list\");\n            return new ModelAndView(\"common/error\", map);\n        }\n\n        map.put(\"url\", \"/sell/seller/product/list\");\n        return new ModelAndView(\"common/success\", map);\n    }\n\n    @GetMapping(\"/discontinue\")\n    public ModelAndView discontinue(@RequestParam(\"productId\") String productId,\n                                 Map<String, Object> map){\n        try{\n            productService.discontinue(productId);\n        } catch(SellException e){\n            map.put(\"msg\", e.getMessage());\n            map.put(\"url\", \"/sell/seller/product/list\");\n            return new ModelAndView(\"common/error\", map);\n        }\n\n        map.put(\"url\", \"/sell/seller/product/list\");\n        return new ModelAndView(\"common/success\", map);\n    }\n\n    @GetMapping(\"/edit\")\n    public ModelAndView edit(@RequestParam(value = \"productId\", required = false) String productId,\n                              Map<String, Object> map){\n        if (!StringUtils.isEmpty(productId)){\n            ProductInfo productInfo = productService.findOne(productId);\n            map.put(\"productInfo\", productInfo);\n        }\n\n        // search all categories\n        List<CategoryInfo> categoryList = categoryService.findAll();\n        map.put(\"categoryList\", categoryList);\n\n        return new ModelAndView(\"product/edit\", map);\n    }\n\n    /**\n     * Submit/ Update a product's info\n     * @param form\n     * @param bindingResult\n     * @param map\n     * @return\n     */\n    @PostMapping(\"/save\")\n    //@CachePut(cacheNames = \"product\", key = \"123\")\n    //@CacheEvict(cacheNames = \"product\", key = \"123\")\n    public ModelAndView save(@Valid ProductForm form,\n                             BindingResult bindingResult,\n                             Map<String, Object> map){\n        // validate form\n        if (bindingResult.hasErrors()){\n            map.put(\"msg\", bindingResult.getFieldError().getDefaultMessage());\n            map.put(\"url\", \"/sell/seller/product/edit\");\n            return new ModelAndView(\"common/error\", map);\n        }\n        // copy properties from form to the productInfo object\n        ProductInfo productInfo = new ProductInfo();\n        try{\n            if (!StringUtils.isEmpty(form.getProductId())) {\n                productInfo = productService.findOne(form.getProductId());\n            } else{\n                form.setProductId(KeyUtil.genUniqueKey());\n            }\n            BeanUtils.copyProperties(form, productInfo);\n            productService.save(productInfo);\n        } catch (SellException e){\n            map.put(\"msg\", e.getMessage());\n            map.put(\"url\", \"/sell/seller/product/edit\");\n            return new ModelAndView(\"common/error\", map);\n        }\n        // return to success page\n        map.put(\"url\", \"/sell/seller/product/list\");\n        return new ModelAndView(\"common/success\", map);\n    }\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/controller/SellerProductController.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/controller/SellerProductController.java	(date 1577824765161)
@@ -42,7 +42,7 @@
     public ModelAndView list(@RequestParam(value = "page", defaultValue = "1") int page,
                              @RequestParam(value = "size", defaultValue = "10") int size,
                              Map<String, Object> map){
-        PageRequest request = new PageRequest(page - 1, size);  // start from 1
+        PageRequest request = PageRequest.of(page - 1, size);  // start from 1
         Page<ProductInfo> productInfoPage = productService.findAll(request);
         map.put("productInfoPage", productInfoPage);
         map.put("currentPage", page);
Index: ../mart/src/test/java/com/service/mart/repository/CategoryInfoRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.repository;\n\nimport com.service.mart.entity.CategoryInfo;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport javax.transaction.Transactional;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class CategoryInfoRepositoryTest {\n    @Autowired\n    private ProductCategoryRepository repository;\n    @Test\n    public void findOneTest(){\n        CategoryInfo categoryInfo =  repository.findOne(1);\n        System.out.println(categoryInfo);\n    }\n\n    @Test\n    @Transactional\n    public void saveTest(){\n        CategoryInfo categoryInfo = new CategoryInfo(\"women's favorite\", 4);\n        CategoryInfo result = repository.save(categoryInfo);\n        Assert.assertNotNull(result);\n    }\n\n    @Test\n    public void findByCategoryTypeInTest(){\n        List<Integer> list = Arrays.asList(2, 3, 4);\n        List<CategoryInfo> result = repository.findByCategoryTypeIn(list);\n        Assert.assertNotEquals(0, result.size());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/test/java/com/service/mart/repository/CategoryInfoRepositoryTest.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/test/java/com/service/mart/repository/CategoryInfoRepositoryTest.java	(date 1577823952779)
@@ -20,7 +20,7 @@
     private ProductCategoryRepository repository;
     @Test
     public void findOneTest(){
-        CategoryInfo categoryInfo =  repository.findOne(1);
+        CategoryInfo categoryInfo =  repository.findById(1).orElse(null);
         System.out.println(categoryInfo);
     }
 
Index: ../mart/src/main/java/com/service/mart/controller/WechatController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.controller;\n\nimport com.service.mart.config.ProjectUrlConfig;\nimport com.service.mart.enums.ResultEnum;\nimport com.service.mart.exception.SellException;\nimport lombok.extern.slf4j.Slf4j;\nimport me.chanjar.weixin.common.api.WxConsts;\nimport me.chanjar.weixin.common.exception.WxErrorException;\nimport me.chanjar.weixin.mp.api.WxMpService;\nimport me.chanjar.weixin.mp.bean.result.WxMpOAuth2AccessToken;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport java.net.URLEncoder;\n\n@Controller\n@RequestMapping(\"/wechat\")\n@Slf4j\npublic class WechatController {\n    @Autowired\n    private WxMpService wxMpService;\n\n    @Autowired\n    private WxMpService wxOpenService;\n\n    @Autowired\n    private ProjectUrlConfig projectUrlConfig;\n\n    @GetMapping(\"/authorize\")\n    public String authorize(@RequestParam(\"returnUrl\") String returnUrl){\n        //1. configuration(finished in wechatMpConfig class)\n        String url = projectUrlConfig.getWechatMpAuthorize() + \"/sell/wechat/userInfo\";\n        String redirectUrl = wxMpService.oauth2buildAuthorizationUrl(url, WxConsts.OAUTH2_SCOPE_USER_INFO, URLEncoder.encode(returnUrl));\n        //2. call method\n        log.info(\"[WeChat web authorization]Get code,result={}\", redirectUrl);\n        return (\"redirect:\" + redirectUrl);\n    }\n\n    @GetMapping(\"/userInfo\")\n    public String userInfo(@RequestParam(\"code\") String code,\n                         @RequestParam(\"state\") String returnUrl){\n        WxMpOAuth2AccessToken wxMpOAuth2AccessToken = new WxMpOAuth2AccessToken();\n        try{\n            wxMpOAuth2AccessToken = wxMpService.oauth2getAccessToken(code);\n        } catch(WxErrorException e){\n            log.error(\"[WeChat web authorization] {}\",e);\n            throw new SellException(ResultEnum.WECHAT_MP_ERROR.getCode(), e.getError().getErrorMsg());\n        }\n        String openId = wxMpOAuth2AccessToken.getOpenId();\n        return (\"redirect:\" + returnUrl + \"?openId=\" + openId);\n    }\n\n\n    @GetMapping(\"/qrAuthorize\")\n    public String qrAuthorize(@RequestParam(\"returnUrl\") String returnUrl){\n        String url = projectUrlConfig.getWechatOpenAuthorize() + \"/sell/wechat/qrUserInfo\";\n        String redirectUrl = wxOpenService.buildQrConnectUrl(url, WxConsts.QRCONNECT_SCOPE_SNSAPI_LOGIN, \"\");\n        return (\"redirect:\" + redirectUrl);\n    }\n    @GetMapping(\"/qrUserInfo\")\n\n    public String qrUserInfo(@RequestParam(\"code\") String code,\n            @RequestParam(\"state\") String returnUrl){\n            WxMpOAuth2AccessToken wxMpOAuth2AccessToken = new WxMpOAuth2AccessToken();\n            try{\n                wxMpOAuth2AccessToken = wxOpenService.oauth2getAccessToken(code);\n            } catch(WxErrorException e){\n                log.error(\"[WeChat web authorization] {}\",e);\n                throw new SellException(ResultEnum.WECHAT_MP_ERROR.getCode(), e.getError().getErrorMsg());\n            }\n            String openId = wxMpOAuth2AccessToken.getOpenId();\n            return (\"redirect:\" + returnUrl + \"?openId=\" + openId);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/controller/WechatController.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/controller/WechatController.java	(date 1577825134447)
@@ -33,7 +33,13 @@
     public String authorize(@RequestParam("returnUrl") String returnUrl){
         //1. configuration(finished in wechatMpConfig class)
         String url = projectUrlConfig.getWechatMpAuthorize() + "/sell/wechat/userInfo";
-        String redirectUrl = wxMpService.oauth2buildAuthorizationUrl(url, WxConsts.OAUTH2_SCOPE_USER_INFO, URLEncoder.encode(returnUrl));
+        String redirectUrl = "/common/error";
+        try{
+            redirectUrl = wxMpService.oauth2buildAuthorizationUrl(url, WxConsts.OAUTH2_SCOPE_USER_INFO, URLEncoder.encode(returnUrl, "UTF-8"));
+        } catch (Exception e){
+            log.error("[WeChat web authorization] unsupported encoding, returnUrl={}", returnUrl);
+        }
+
         //2. call method
         log.info("[WeChat web authorization]Get code,result={}", redirectUrl);
         return ("redirect:" + redirectUrl);
Index: ../mart/src/main/java/com/service/mart/controller/SellerOrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.controller;\n\nimport com.lly835.bestpay.rest.type.Get;\nimport com.service.mart.dto.OrderDTO;\nimport com.service.mart.enums.ResultEnum;\nimport com.service.mart.exception.SellException;\nimport com.service.mart.service.OrderService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport java.util.Map;\n\n@Controller\n@RequestMapping(\"/seller/order\")\n@Slf4j\npublic class SellerOrderController {\n\n    @Autowired\n    private OrderService orderService;\n\n    /**\n     * List all the orders.\n     * @param page\n     * @param size\n     * @param map\n     * @return\n     */\n    @GetMapping(\"/list\")\n    public ModelAndView list(@RequestParam(value = \"page\", defaultValue = \"1\") int page,\n                             @RequestParam(value = \"size\", defaultValue = \"10\") int size,\n                             Map<String, Object> map){\n        PageRequest request = new PageRequest(page - 1, size);  // start from 1\n        Page<OrderDTO> orderDTOPage = orderService.findList(request);\n        map.put(\"orderDTOPage\", orderDTOPage);\n        map.put(\"currentPage\", page);\n        map.put(\"size\", size);\n        return new ModelAndView(\"order/list\", map);\n    }\n\n    /**\n     * Cancel an order.\n     * @param orderId\n     * @param map\n     * @return\n     */\n    @GetMapping(\"/cancel\")\n    public ModelAndView cancel(@RequestParam(\"orderId\") String orderId,\n                               Map<String, Object> map){\n        try{\n            OrderDTO orderDTO = orderService.findOne(orderId);\n            orderService.cancel(orderDTO);\n        } catch (SellException e){\n            log.error(\"[Seller cancel order] Error{}\", e);\n            map.put(\"msg\", e.getMessage());\n            map.put(\"url\", \"/sell/seller/order/list\");\n            return new ModelAndView(\"common/error\", map);\n        }\n        map.put(\"msg\", ResultEnum.ORDER_CANCEL_SUCCESS.getMsg());\n        map.put(\"url\", \"/sell/seller/order/list\");\n        return new ModelAndView(\"common/success\", map);\n    }\n\n    /**\n     * See order details.\n     * @param orderId\n     * @param map\n     * @return\n     */\n    @GetMapping(\"/detail\")\n    public ModelAndView detail(@RequestParam(\"orderId\") String orderId,\n                               Map<String, Object> map){\n        OrderDTO orderDTO = new OrderDTO();\n        try{\n            orderDTO = orderService.findOne(orderId);\n        } catch (SellException e){\n            log.error(\"[Seller cancel order] Cannot find the order\");\n            map.put(\"msg\", e.getMessage());\n            map.put(\"url\", \"/sell/seller/order/list\");\n            return new ModelAndView(\"common/error\", map);\n        }\n        map.put(\"orderDTO\", orderDTO);\n        return new ModelAndView(\"order/detail\", map);\n    }\n\n    /**\n     * Finish an order.\n     * @param orderId\n     * @param map\n     * @return\n     */\n    @GetMapping(\"/finish\")\n    public ModelAndView finish(@RequestParam(\"orderId\") String orderId,\n                               Map<String, Object> map) {\n        try{\n            OrderDTO orderDTO = orderService.findOne(orderId);\n            orderService.finish(orderDTO);\n        } catch (SellException e){\n            log.error(\"[Seller cancel order] Error{}\", e);\n            map.put(\"msg\", e.getMessage());\n            map.put(\"url\", \"/sell/seller/order/list\");\n            return new ModelAndView(\"common/error\", map);\n        }\n        map.put(\"msg\", ResultEnum.ORDER_FINISH_SUCCESS.getMsg());\n        map.put(\"url\", \"/sell/seller/order/list\");\n        return new ModelAndView(\"common/success\", map);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/controller/SellerOrderController.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/controller/SellerOrderController.java	(date 1577824765147)
@@ -1,6 +1,5 @@
 package com.service.mart.controller;
 
-import com.lly835.bestpay.rest.type.Get;
 import com.service.mart.dto.OrderDTO;
 import com.service.mart.enums.ResultEnum;
 import com.service.mart.exception.SellException;
@@ -36,7 +35,7 @@
     public ModelAndView list(@RequestParam(value = "page", defaultValue = "1") int page,
                              @RequestParam(value = "size", defaultValue = "10") int size,
                              Map<String, Object> map){
-        PageRequest request = new PageRequest(page - 1, size);  // start from 1
+        PageRequest request = PageRequest.of(page - 1, size);  // start from 1
         Page<OrderDTO> orderDTOPage = orderService.findList(request);
         map.put("orderDTOPage", orderDTOPage);
         map.put("currentPage", page);
Index: ../mart/src/test/java/com/service/mart/service/impl/ProductServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.service.impl;\n\nimport com.service.mart.entity.ProductInfo;\nimport com.service.mart.enums.ProductStatusEnum;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.math.BigDecimal;\nimport java.util.List;\n\nimport static org.junit.Assert.*;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class ProductServiceImplTest {\n    @Autowired\n    private ProductServiceImpl productService;\n    @Test\n    public void findOne() {\n        ProductInfo productInfo = productService.findOne(\"123456\");\n        Assert.assertEquals(\"123456\", productInfo.getProductId());\n    }\n\n    @Test\n    public void findInAll() {\n        List<ProductInfo> productInfoList = productService.findInAll();\n        Assert.assertNotEquals(0, productInfoList.size());\n    }\n\n    @Test\n    public void findAll() {\n        PageRequest request = new PageRequest(0, 2);\n        Page<ProductInfo> productInfoPage = productService.findAll(request);\n        System.out.println(productInfoPage.getTotalElements());\n    }\n\n    @Test\n    public void save() {\n        ProductInfo productInfo = new ProductInfo();\n        productInfo.setProductId(\"123457\");\n        productInfo.setProductName(\"coke\");\n        productInfo.setProductPrice(new BigDecimal(1.00));\n        productInfo.setProductStock(100);\n        productInfo.setProductDescription(\"normal coke\");\n        productInfo.setProductIcon(\"http://xxxxx.jpg\");\n        productInfo.setProductStatus(ProductStatusEnum.DIS.getCode());\n        productInfo.setCategoryType(2);\n\n        ProductInfo result = productService.save(productInfo);\n        Assert.assertNotNull(result);\n    }\n\n    @Test\n    public void onMarket(){\n        ProductInfo result = productService.onMarket(\"123456\");\n        Assert.assertEquals(ProductStatusEnum.ON.getCode(), result.getProductStatus());\n    }\n\n    @Test\n    public void discontinue(){\n        ProductInfo result = productService.discontinue(\"123456\");\n        Assert.assertEquals(ProductStatusEnum.DIS.getCode(), result.getProductStatus());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/test/java/com/service/mart/service/impl/ProductServiceImplTest.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/test/java/com/service/mart/service/impl/ProductServiceImplTest.java	(date 1577824765152)
@@ -14,8 +14,6 @@
 import java.math.BigDecimal;
 import java.util.List;
 
-import static org.junit.Assert.*;
-
 @RunWith(SpringRunner.class)
 @SpringBootTest
 public class ProductServiceImplTest {
@@ -35,7 +33,7 @@
 
     @Test
     public void findAll() {
-        PageRequest request = new PageRequest(0, 2);
+        PageRequest request = PageRequest.of(0, 2);
         Page<ProductInfo> productInfoPage = productService.findAll(request);
         System.out.println(productInfoPage.getTotalElements());
     }
Index: ../mart/src/main/java/com/service/mart/service/impl/ProductServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.service.impl;\n\nimport com.service.mart.dto.CartDTO;\nimport com.service.mart.entity.ProductInfo;\nimport com.service.mart.enums.ProductStatusEnum;\nimport com.service.mart.enums.ResultEnum;\nimport com.service.mart.exception.SellException;\nimport com.service.mart.repository.ProductInfoRepository;\nimport com.service.mart.service.ProductService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cache.annotation.CacheConfig;\nimport org.springframework.cache.annotation.CachePut;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.util.List;\n@Service\n@CacheConfig(cacheNames = \"product\")\npublic class ProductServiceImpl implements ProductService {\n\n    @Autowired\n    private ProductInfoRepository repository;\n\n    @Override\n    @Cacheable(key = \"123\")\n    public ProductInfo findOne(String productId) {\n        return repository.findOne(productId);\n    }\n\n    @Override\n    public List<ProductInfo> findInAll() {\n        return repository.findByProductStatus(ProductStatusEnum.ON.getCode());\n    }\n\n    @Override\n    public Page<ProductInfo> findAll(Pageable pageable) {\n        return repository.findAll(pageable);\n    }\n\n    @Override\n    @CachePut(key = \"123\")\n    public ProductInfo save(ProductInfo productInfo) {\n        return repository.save(productInfo);\n    }\n\n    @Override\n    @Transactional\n    public void increaseStock(List<CartDTO> cartDTOList) {\n        for (CartDTO cartDTO: cartDTOList){\n            ProductInfo productInfo = repository.findOne(cartDTO.getProductId());\n            if (productInfo == null){\n                throw new SellException(ResultEnum.PRODUCT_NOT_EXIST);\n            }\n            Integer result = productInfo.getProductStock() + cartDTO.getProductQuantity();\n            productInfo.setProductStock(result);\n            repository.save(productInfo);\n        }\n    }\n\n    @Override\n    @Transactional\n    public void decreaseStock(List<CartDTO> cartDTOList) {\n        for (CartDTO cartDTO: cartDTOList){\n            ProductInfo productInfo = repository.findOne(cartDTO.getProductId());\n            if (productInfo == null){\n                throw new SellException(ResultEnum.PRODUCT_NOT_EXIST);\n            }\n            Integer result = productInfo.getProductStock() - cartDTO.getProductQuantity();\n            if (result < 0){\n                throw new SellException(ResultEnum.PRODUCT_STOCK_ERROR);\n            }\n            productInfo.setProductStock(result);\n            repository.save(productInfo);\n        }\n    }\n\n    @Override\n    public ProductInfo onMarket(String productId) {\n        ProductInfo productInfo = repository.findOne(productId);\n        //validate the productInfo object\n        if (productInfo == null){\n            throw new SellException(ResultEnum.PRODUCT_NOT_EXIST);\n        }\n        //validate the status\n        if (productInfo.getProductStatusEnum() == ProductStatusEnum.ON){\n            throw new SellException(ResultEnum.PRODUCT_STATUS_ERROR);\n        }\n\n        //update\n        productInfo.setProductStatus(ProductStatusEnum.ON.getCode());\n        return repository.save(productInfo);\n    }\n\n    @Override\n    public ProductInfo discontinue(String productId) {\n        ProductInfo productInfo = repository.findOne(productId);\n        //validate the productInfo object\n        if (productInfo == null){\n            throw new SellException(ResultEnum.PRODUCT_NOT_EXIST);\n        }\n        //validate the status\n        if (productInfo.getProductStatusEnum() == ProductStatusEnum.DIS){\n            throw new SellException(ResultEnum.PRODUCT_STATUS_ERROR);\n        }\n\n        //update\n        productInfo.setProductStatus(ProductStatusEnum.DIS.getCode());\n        return repository.save(productInfo);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/service/impl/ProductServiceImpl.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/service/impl/ProductServiceImpl.java	(date 1577824465005)
@@ -17,6 +17,8 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import java.util.List;
+import java.util.Optional;
+
 @Service
 @CacheConfig(cacheNames = "product")
 public class ProductServiceImpl implements ProductService {
@@ -27,7 +29,8 @@
     @Override
     @Cacheable(key = "123")
     public ProductInfo findOne(String productId) {
-        return repository.findOne(productId);
+        Optional<ProductInfo> productInfoOptional = repository.findById(productId);
+        return productInfoOptional.orElse(null);
     }
 
     @Override
@@ -50,7 +53,7 @@
     @Transactional
     public void increaseStock(List<CartDTO> cartDTOList) {
         for (CartDTO cartDTO: cartDTOList){
-            ProductInfo productInfo = repository.findOne(cartDTO.getProductId());
+            ProductInfo productInfo = repository.findById(cartDTO.getProductId()).orElse(null);
             if (productInfo == null){
                 throw new SellException(ResultEnum.PRODUCT_NOT_EXIST);
             }
@@ -64,7 +67,7 @@
     @Transactional
     public void decreaseStock(List<CartDTO> cartDTOList) {
         for (CartDTO cartDTO: cartDTOList){
-            ProductInfo productInfo = repository.findOne(cartDTO.getProductId());
+            ProductInfo productInfo = repository.findById(cartDTO.getProductId()).orElse(null);
             if (productInfo == null){
                 throw new SellException(ResultEnum.PRODUCT_NOT_EXIST);
             }
@@ -79,7 +82,7 @@
 
     @Override
     public ProductInfo onMarket(String productId) {
-        ProductInfo productInfo = repository.findOne(productId);
+        ProductInfo productInfo = repository.findById(productId).orElse(null);
         //validate the productInfo object
         if (productInfo == null){
             throw new SellException(ResultEnum.PRODUCT_NOT_EXIST);
@@ -96,7 +99,7 @@
 
     @Override
     public ProductInfo discontinue(String productId) {
-        ProductInfo productInfo = repository.findOne(productId);
+        ProductInfo productInfo = repository.findById(productId).orElse(null);
         //validate the productInfo object
         if (productInfo == null){
             throw new SellException(ResultEnum.PRODUCT_NOT_EXIST);
Index: ../mart/src/main/java/com/service/mart/controller/ConsumerOrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.controller;\n\nimport com.service.mart.converter.OrderForm2OrderDTOConverter;\nimport com.service.mart.dto.OrderDTO;\nimport com.service.mart.enums.ResultEnum;\nimport com.service.mart.exception.SellException;\nimport com.service.mart.form.OrderForm;\nimport com.service.mart.service.ConsumerService;\nimport com.service.mart.service.OrderService;\nimport com.service.mart.util.ResultVOUtil;\nimport com.service.mart.viewobject.ResultVO;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/buyer/order\")\n@Slf4j\npublic class ConsumerOrderController {\n    @Autowired\n    private OrderService orderService;\n\n    @Autowired\n    private ConsumerService consumerService;\n\n    // create a new order\n    @PostMapping(\"/create\")\n    public ResultVO<Map<String, String>> create(@Valid OrderForm orderForm,\n                                                BindingResult bindingResult){\n        if (bindingResult.hasErrors()){\n            log.error(\"[Create order]Invalid parameters, orderForm={}\", orderForm);\n            throw new SellException(ResultEnum.PARAM_ERROR.getCode(),\n                    bindingResult.getFieldError().getDefaultMessage()); // record which field is invalid\n        }\n        OrderDTO orderDTO = OrderForm2OrderDTOConverter.convert(orderForm);\n\n        // empty cart\n        if (CollectionUtils.isEmpty(orderDTO.getOrderDetailList())){\n            log.error(\"[Create order]Empty cart, orderDTO={}\", orderDTO);\n            throw new SellException(ResultEnum.CART_EMPTY);\n        }\n        OrderDTO createResult = orderService.create(orderDTO);\n        Map<String, String> map = new HashMap<>();\n        map.put(\"orderId\", createResult.getOrderId());\n\n        return ResultVOUtil.success(map);\n    }\n    // order list\n    @GetMapping(\"/list\")\n    public ResultVO list(@RequestParam(\"openid\") String openid,\n                         @RequestParam(value = \"page\", defaultValue = \"0\") Integer page,\n                         @RequestParam(value = \"size\", defaultValue = \"10\") Integer size){\n        if (StringUtils.isEmpty(openid)){\n            log.error(\"[Search order list] openid is empty\");\n            throw new SellException(ResultEnum.PARAM_ERROR);\n        }\n        PageRequest request = new PageRequest(page, size);\n        Page<OrderDTO> orderDTOPage = orderService.findList(openid, request);\n\n        return ResultVOUtil.success(orderDTOPage.getContent());\n    }\n    // browse one order (order detail)\n    @GetMapping(\"/detail\")\n    public ResultVO detail(@RequestParam(\"openid\") String openid,\n                           @RequestParam(\"orderId\") String orderId){\n\n        OrderDTO orderDTO = consumerService.findOneOrder(openid, orderId);\n        return ResultVOUtil.success(orderDTO);\n    }\n    // cancel order\n    @PostMapping(\"/cancel\")\n    public ResultVO<OrderDTO> cancel(@RequestParam(\"openid\") String openid,\n                           @RequestParam(\"orderId\") String orderId){\n        consumerService.cancelOneOrder(openid, orderId);\n        return ResultVOUtil.success();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/controller/ConsumerOrderController.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/controller/ConsumerOrderController.java	(date 1577825489992)
@@ -20,6 +20,7 @@
 
 import javax.validation.Valid;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 @RestController
@@ -33,6 +34,7 @@
     private ConsumerService consumerService;
 
     // create a new order
+    @SuppressWarnings("unchecked")
     @PostMapping("/create")
     public ResultVO<Map<String, String>> create(@Valid OrderForm orderForm,
                                                 BindingResult bindingResult){
@@ -56,21 +58,23 @@
     }
     // order list
     @GetMapping("/list")
-    public ResultVO list(@RequestParam("openid") String openid,
-                         @RequestParam(value = "page", defaultValue = "0") Integer page,
-                         @RequestParam(value = "size", defaultValue = "10") Integer size){
+    @SuppressWarnings("unchecked")
+    public ResultVO<List<OrderDTO>> list(@RequestParam("openid") String openid,
+                                         @RequestParam(value = "page", defaultValue = "0") Integer page,
+                                         @RequestParam(value = "size", defaultValue = "10") Integer size){
         if (StringUtils.isEmpty(openid)){
             log.error("[Search order list] openid is empty");
             throw new SellException(ResultEnum.PARAM_ERROR);
         }
-        PageRequest request = new PageRequest(page, size);
+        PageRequest request = PageRequest.of(page, size);
         Page<OrderDTO> orderDTOPage = orderService.findList(openid, request);
 
         return ResultVOUtil.success(orderDTOPage.getContent());
     }
     // browse one order (order detail)
     @GetMapping("/detail")
-    public ResultVO detail(@RequestParam("openid") String openid,
+    @SuppressWarnings("unchecked")
+    public ResultVO<OrderDTO> detail(@RequestParam("openid") String openid,
                            @RequestParam("orderId") String orderId){
 
         OrderDTO orderDTO = consumerService.findOneOrder(openid, orderId);
@@ -78,6 +82,7 @@
     }
     // cancel order
     @PostMapping("/cancel")
+    @SuppressWarnings("unchecked")
     public ResultVO<OrderDTO> cancel(@RequestParam("openid") String openid,
                            @RequestParam("orderId") String orderId){
         consumerService.cancelOneOrder(openid, orderId);
Index: ../mart/src/test/java/com/service/mart/service/impl/OrderServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.service.impl;\n\nimport com.service.mart.dto.OrderDTO;\nimport com.service.mart.entity.OrderDetail;\nimport com.service.mart.enums.OrderStatusEnum;\nimport com.service.mart.enums.PayStatusEnum;\nimport lombok.extern.slf4j.Slf4j;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\n@Slf4j\npublic class OrderServiceImplTest {\n    @Autowired\n    private  OrderServiceImpl orderService;\n    private final String OPEN_ID = \"110\";\n    private final String ORDERID = \"157739780175785417\";\n    @Test\n    public void create() {\n        OrderDTO orderDTO = new OrderDTO();\n        orderDTO.setFirstName(\"John\");\n        orderDTO.setLastName(\"Smith\");\n        orderDTO.setConsumerAddress(\"CMU\");\n        orderDTO.setConsumerPhone(\"123-456-7890\");\n        orderDTO.setConsumerOpenid(OPEN_ID);\n\n        // Set up the cart\n        List<OrderDetail> orderDetailList = new LinkedList<>();\n        OrderDetail o1 = new OrderDetail();\n        o1.setProductId(\"1234568\");\n        o1.setProductQuantity(1);\n\n        OrderDetail o2 = new OrderDetail();\n        o2.setProductId(\"123457\");\n        o2.setProductQuantity(3);\n\n        orderDetailList.add(o1);\n        orderDetailList.add(o2);\n\n        orderDTO.setOrderDetailList(orderDetailList);\n\n        OrderDTO result = orderService.create(orderDTO);\n        log.info(\"[Create order] result = {}\", result);\n\n        Assert.assertNotNull(result);\n    }\n\n    @Test\n    public void findOne() {\n        OrderDTO result = orderService.findOne(ORDERID);\n        log.info(\"[Search a single order] result={}\", result);\n        Assert.assertEquals(ORDERID, result.getOrderId());\n    }\n\n    @Test\n    public void findList() {\n        PageRequest request = new PageRequest(0, 2);\n        Page<OrderDTO> orderDTOPage = orderService.findList(OPEN_ID, request);\n        Assert.assertNotEquals(0, orderDTOPage.getTotalElements());\n    }\n\n    @Test\n    public void cancel() {\n        OrderDTO orderDTO = orderService.findOne(ORDERID);\n        OrderDTO result = orderService.cancel(orderDTO);\n        Assert.assertEquals(OrderStatusEnum.CANCELLED.getCode(), result.getOrderStatus());\n    }\n\n    @Test\n    public void pay() {\n        OrderDTO orderDTO = orderService.findOne(\"157739757548510934\");\n        OrderDTO result = orderService.pay(orderDTO);\n        Assert.assertEquals(PayStatusEnum.SUCCESS.getCode(), result.getPayStatus());\n\n    }\n\n    @Test\n    public void finish() {\n        OrderDTO orderDTO = orderService.findOne(\"157739757548510934\");\n        OrderDTO result = orderService.finish(orderDTO);\n        Assert.assertEquals(OrderStatusEnum.FINISHED.getCode(), result.getOrderStatus());\n    }\n\n    @Test\n    public void list(){\n        PageRequest request = new PageRequest(0,2);\n        Page<OrderDTO> orderDTOPage = orderService.findList(request);\n        Assert.assertNotEquals(0, orderDTOPage.getTotalElements());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/test/java/com/service/mart/service/impl/OrderServiceImplTest.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/test/java/com/service/mart/service/impl/OrderServiceImplTest.java	(date 1577824765150)
@@ -64,7 +64,7 @@
 
     @Test
     public void findList() {
-        PageRequest request = new PageRequest(0, 2);
+        PageRequest request = PageRequest.of(0, 2);
         Page<OrderDTO> orderDTOPage = orderService.findList(OPEN_ID, request);
         Assert.assertNotEquals(0, orderDTOPage.getTotalElements());
     }
@@ -93,7 +93,7 @@
 
     @Test
     public void list(){
-        PageRequest request = new PageRequest(0,2);
+        PageRequest request = PageRequest.of(0,2);
         Page<OrderDTO> orderDTOPage = orderService.findList(request);
         Assert.assertNotEquals(0, orderDTOPage.getTotalElements());
     }
Index: ../mart/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>1.5.3.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.service</groupId>\n\t<artifactId>mart</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>mart</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.junit.vintage</groupId>\n\t\t\t\t\t<artifactId>junit-vintage-engine</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <scope>test</scope>\n        </dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.google.code.gson</groupId>\n\t\t\t<artifactId>gson</artifactId>\n\t\t</dependency>\n\n\n\t\t<dependency>\n\t\t\t<groupId>com.github.binarywang</groupId>\n\t\t\t<artifactId>weixin-java-mp</artifactId>\n\t\t\t<version>2.7.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-configuration-processor</artifactId>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>cn.springboot</groupId>\n\t\t\t<artifactId>best-pay-sdk</artifactId>\n\t\t\t<version>1.1.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-freemarker</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-websocket</artifactId>\n\t\t</dependency>\n\n    </dependencies>\n\n\t<build>\n\t\t<finalName>mart</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/pom.xml	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/pom.xml	(date 1577823541233)
@@ -5,7 +5,7 @@
 	<parent>
 		<groupId>org.springframework.boot</groupId>
 		<artifactId>spring-boot-starter-parent</artifactId>
-		<version>1.5.3.RELEASE</version>
+		<version>2.1.1.RELEASE</version>
 		<relativePath/> <!-- lookup parent from repository -->
 	</parent>
 	<groupId>com.service</groupId>
Index: ../mart/src/main/java/com/service/mart/service/impl/RushDealServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.service.impl;\n\nimport com.service.mart.exception.SellException;\nimport com.service.mart.service.RedisLock;\nimport com.service.mart.service.RushDealService;\nimport com.service.mart.util.KeyUtil;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\npublic class RushDealServiceImpl implements RushDealService {\n    private static final int TIMEOUT = 10 * 1000;//超时时间10秒\n\n    @Autowired\n    private RedisLock redisLock;\n\n    /**\n     * 国庆活动，皮蛋粥特价限量100000份\n     *\n     * 模拟多个表，商品信息表、库存表、秒杀成功订单表\n     */\n    static Map<String,Object> products;\n    static Map<String,Object> stock;\n    static Map<String,Object> orders;\n\n    static {\n        products = new HashMap<>();\n        stock = new HashMap<>();\n        orders = new HashMap<>();\n\n        products.put(\"157875196366160022\",100000);\n        stock.put(\"157875196366160022\",100000);\n    }\n    /**\n     * 模拟查询秒杀商品的信息\n     * @param productId\n     * @return\n     */\n    @Override\n    public String queryRushDealProductInfo(String productId) {\n        return \"国庆活动，皮蛋粥特价，限量份\"\n                + products.get(productId)\n                + \"还剩\" + stock.get(productId) + \"份\"\n                + \"该商品成功下单用户数：\" + orders.size() + \"人\";\n    }\n\n    /**\n     * 高并发秒杀操作.秒杀失败返回“哎呦喂，xxxxx”。\n     * @param productId\n     * @return\n     */\n    @Override\n    public void orderProductMockDiffUser(String productId) {\n        purchase(productId);\n    }\n\n    /**\n     * 使用Redis分布式锁处理高并发\n     * @param productId\n     */\n    public void orderProductMockDiffUserByRedis(String productId) {\n        //1. 加Redis分布式锁\n        long time = System.currentTimeMillis() + TIMEOUT;\n        if(!redisLock.lock(productId,String.valueOf(time))){ // if locking failed\n            throw new SellException(101,\"哎呦喂，人也太多了，换个姿势再试试~~~\");\n        }\n\n        //purchase operation\n        purchase(productId);\n\n        //4.解除Redis分布式锁\n        redisLock.unlock(productId,String.valueOf(time));\n    }\n\n    /**\n     * 秒杀操作\n     * @param productId\n     */\n    private void purchase(String productId){\n        //1. 查询该商品库存，为0则活动结束\n        Integer stockNum = Integer.valueOf(stock.get(productId).toString());\n        if(stockNum == 0){\n            throw new SellException(100, \"The deal has ended, thank you for your participation.\");\n        }else{\n            //2. 下单（模拟不同用户openid不同）\n            orders.put(KeyUtil.genUniqueKey(),productId);\n            //3. 减库存\n            stockNum -= 1;\n            try {\n                Thread.sleep(100);\n            }catch (InterruptedException e){\n                e.printStackTrace();\n            }\n            stock.put(productId,stockNum);\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/service/impl/RushDealServiceImpl.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/service/impl/RushDealServiceImpl.java	(date 1577841386530)
@@ -54,6 +54,7 @@
      */
     @Override
     public void orderProductMockDiffUser(String productId) {
+
         purchase(productId);
     }
 
Index: ../mart/src/main/resources/templates/pay/create.ftl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/resources/templates/pay/create.ftl	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/resources/templates/pay/create.ftl	(date 1577830586859)
@@ -1,0 +1,30 @@
+<script>
+    function onBridgeReady() {
+        WeixinJSBridge.invoke(
+            'getBrandWCPayRequest', {
+                "appId": "${payResponse.appId}",     //公众号名称，由商户传入
+                "timeStamp": "${payResponse.timeStamp}",         //时间戳，自1970年以来的秒数
+                "nonceStr": "${payResponse.nonceStr}", //随机串
+                "package": "${payResponse.packAge}",
+                "signType": "${payResponse.signType}",         //微信签名方式：
+                "paySign": "${payResponse.paySign}" //微信签名
+            },
+            function (res) {
+                // if (res.err_msg == "get_brand_wcpay_request:ok") {
+                // 使用以上方式判断前端返回,微信团队郑重提示：
+                //res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。
+                // }
+                location.href = "${returnUrl}"
+            });
+    }
+    if (typeof WeixinJSBridge == "undefined") {
+        if (document.addEventListener) {
+            document.addEventListener('WeixinJSBridgeReady', onBridgeReady, false);
+        } else if (document.attachEvent) {
+            document.attachEvent('WeixinJSBridgeReady', onBridgeReady);
+            document.attachEvent('onWeixinJSBridgeReady', onBridgeReady);
+        }
+    } else {
+        onBridgeReady();
+    }
+</script>
\ No newline at end of file
Index: ../mart/src/main/java/com/service/mart/form/OrderForm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.form;\n\nimport lombok.Data;\nimport org.hibernate.validator.constraints.NotEmpty;\n\n/**\n * Validate the order's parameters\n */\n@Data\npublic class OrderForm {\n\n    /** Consumer's first name */\n    @NotEmpty(message = \"First name is required\")\n    private String firstName;\n\n    /** Consumer's last name */\n    @NotEmpty(message = \"Last name is required\")\n    private String lastName;\n\n    /** Consumer's phone number */\n    @NotEmpty(message = \"Phone number is required\")\n    private String phone;\n\n    /** Consumer's address */\n    @NotEmpty(message = \"Address is required\")\n    private String address;\n\n    /** Consumer's WeChat openid */\n    @NotEmpty(message = \"openid is required\")\n    private String openid;\n\n    /** Shopping cart */\n    private String items;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/form/OrderForm.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/form/OrderForm.java	(date 1577824641540)
@@ -1,7 +1,8 @@
 package com.service.mart.form;
 
 import lombok.Data;
-import org.hibernate.validator.constraints.NotEmpty;
+
+import javax.validation.constraints.NotEmpty;
 
 /**
  * Validate the order's parameters
Index: src/test/java/cmu/youchun/recommender/service/impl/UserServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/cmu/youchun/recommender/service/impl/UserServiceImplTest.java	(date 1578189682190)
+++ src/test/java/cmu/youchun/recommender/service/impl/UserServiceImplTest.java	(date 1578189682190)
@@ -0,0 +1,53 @@
+package cmu.youchun.recommender.service.impl;
+
+
+import cmu.youchun.recommender.BusinessException;
+import cmu.youchun.recommender.model.UserModel;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+
+import java.io.UnsupportedEncodingException;
+import java.security.NoSuchAlgorithmException;
+
+import static org.junit.Assert.*;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+public class UserServiceImplTest {
+    @Autowired
+    UserServiceImpl userService;
+
+    @Test
+    public void getUser() {
+        UserModel userModel = userService.getUser(123456);
+        Assert.assertNotNull(userModel);
+
+    }
+
+    @Test
+    public void register() throws BusinessException, UnsupportedEncodingException, NoSuchAlgorithmException {
+        UserModel userModel = new UserModel();
+        userModel.setNickName("tom");
+        userModel.setPassword("123456");
+        userModel.setPhone("123456789");
+        userModel.setGender(1);
+        UserModel result = userService.register(userModel);
+        Assert.assertNotNull(result);
+
+    }
+
+    @Test
+    public void countAllUser() {
+    }
+
+    @Test
+    public void login() throws BusinessException, UnsupportedEncodingException, NoSuchAlgorithmException {
+
+        UserModel userModel = userService.login("17361013481", "123456");
+        Assert.assertNotNull(userModel);
+    }
+}
Index: ../mart/src/main/java/com/service/mart/service/impl/CategoryServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.service.mart.service.impl;\n\nimport com.service.mart.entity.CategoryInfo;\nimport com.service.mart.repository.ProductCategoryRepository;\nimport com.service.mart.service.CategoryService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n@Service\npublic class CategoryServiceImpl implements CategoryService {\n    @Autowired\n    private ProductCategoryRepository repository;\n\n    @Override\n    public CategoryInfo findOne(Integer categoryId) {\n        return repository.findOne(categoryId);\n    }\n\n    @Override\n    public List<CategoryInfo> findAll() {\n        return repository.findAll();\n    }\n\n    @Override\n    public List<CategoryInfo> findByCategoryTypeIn(List<Integer> categoryTypeList) {\n        return repository.findByCategoryTypeIn(categoryTypeList);\n    }\n\n    @Override\n    public CategoryInfo save(CategoryInfo categoryInfo) {\n        return repository.save(categoryInfo);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../mart/src/main/java/com/service/mart/service/impl/CategoryServiceImpl.java	(revision d7e814cafe2967f593286eaded66cb75f0d034f8)
+++ ../mart/src/main/java/com/service/mart/service/impl/CategoryServiceImpl.java	(date 1577823795134)
@@ -14,7 +14,10 @@
 
     @Override
     public CategoryInfo findOne(Integer categoryId) {
-        return repository.findOne(categoryId);
+        /**
+         * If not found, return null. .get() will throw an Exception.
+         */
+        return repository.findById(categoryId).orElse(null);
     }
 
     @Override
